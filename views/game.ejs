<%- style %>
<style>
html, body {
    height: 100%;
    margin: 0;
    padding: 0;
    background-color: #1a1a1a;
}

.main-content {
    min-height: calc(100vh - 120px);
    display: flex;
    flex-direction: column;
    padding: 2rem;
}

.game-container {
    flex: 1;
    display: flex;
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
    width: 100%;
}

.traits-panel {
    flex: 1;
    max-width: 300px;
    background-color: #2d2d2d;
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    overflow-y: auto;
    height: calc(100vh - 200px);
}

.traits-panel h2 {
    margin: 0 0 1rem 0;
    color: #fff;
    font-size: 1.2rem;
}

.confirmed-trait {
    background-color: #1b3320;
    color: #66bb6a;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    margin-bottom: 0.5rem;
}

.chat-panel {
    flex: 2;
    display: flex;
    flex-direction: column;
    background-color: #2d2d2d;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    overflow: hidden;
    height: calc(100vh - 200px);
}

.messages {
    flex: 1;
    padding: 1rem;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.message {
    padding: 0.5rem 1rem;
    border-radius: 4px;
    max-width: 80%;
}

.message.question {
    background-color: #1a365d;
    color: #90caf9;
    align-self: flex-end;
}

.message.answer {
    background-color: #333;
    color: #fff;
    align-self: flex-start;
}

.message.system {
    background-color: #3d2e1b;
    color: #ffa726;
    align-self: center;
    text-align: center;
}

.message.error {
    background-color: #421c1c;
    color: #ef5350;
    align-self: center;
}

.question-form {
    display: flex;
    gap: 0.5rem;
    padding: 1rem;
    background-color: #1a1a1a;
}

#questionInput {
    flex: 1;
    padding: 0.8rem;
    border: 1px solid #444;
    border-radius: 4px;
    font-size: 1rem;
    background-color: #333;
    color: #fff;
}

#questionInput:focus {
    outline: none;
    border-color: #2196F3;
}

#sendButton {
    padding: 0.8rem 1.5rem;
    background-color: #2196F3;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s;
}

#sendButton:hover {
    background-color: #1976D2;
}

#gameEndControls {
    display: none;
    gap: 1rem;
    padding: 1rem;
    background-color: #1a1a1a;
    justify-content: center;
}

.new-game-button, .history-button {
    padding: 0.8rem 1.5rem;
    border-radius: 4px;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.3s;
}

.new-game-button {
    background-color: #2196F3;
    color: white;
}

.new-game-button:hover {
    background-color: #1976D2;
}

.history-button {
    background-color: #1a1a1a;
    border: 2px solid #2196F3;
    color: #2196F3;
}

.history-button:hover {
    background-color: #2196F3;
    color: white;
}

@media (max-width: 768px) {
    .main-content {
        padding: 1rem;
    }

    .game-container {
        flex-direction: column;
        height: auto;
    }

    .traits-panel {
        max-width: none;
        height: 200px;
    }

    .chat-panel {
        height: calc(100vh - 400px);
    }
}

@media screen and (max-width: 768px) {
    .game-container {
        flex-direction: column;
        gap: 1rem;
    }

    .traits-panel {
        max-width: 100%;
        height: auto;
        max-height: 200px;
    }

    .chat-panel {
        height: calc(100vh - 400px);
    }

    .question-form {
        flex-direction: column;
        gap: 0.8rem;
        padding: 0.8rem;
    }

    #questionInput {
        width: 100%;
        box-sizing: border-box;
    }

    #sendButton {
        width: 100%;
        padding: 0.8rem;
    }
}
</style>

<div class="game-container">
    <div class="traits-panel">
        <h2>Doğru Cevaplar</h2>
        <div id="confirmedTraits"></div>
    </div>
    
    <div class="chat-panel">
        <div id="messages" class="messages"></div>
        <div id="gameControls">
            <form id="questionForm" class="question-form">
                <input type="text" id="questionInput" placeholder="Soru sor..." required>
                <button type="submit" id="sendButton">Gönder</button>
            </form>
            <div id="gameEndControls" style="display: none;">
                <a href="/game/create" class="new-game-button">Yeni Oyun Oluştur</a>
                <a href="/games" class="history-button">Geçmiş Oyunlar</a>
            </div>
        </div>
    </div>
</div>

<%- script %>
<script>
const gameId = '<%= gameId %>';
const messagesDiv = document.getElementById('messages');
const questionForm = document.getElementById('questionForm');
const questionInput = document.getElementById('questionInput');
const confirmedTraits = document.getElementById('confirmedTraits');
const gameControls = document.getElementById('gameControls');
const gameEndControls = document.getElementById('gameEndControls');

// Önceki soruları yükle
const questions = <%- JSON.stringify(questions || []) %>;
questions.forEach(q => {
    addMessage(q.question, 'question');
    addMessage(q.answer, 'answer');
    
    // Eğer cevap "Evet" ise, doğru cevaplar paneline ekle
    if (q.answer.toLowerCase().startsWith('evet')) {
        addConfirmedTrait(q.question);
    }
    
    // Eğer oyun bittiyse
    if (q.answer === 'Evet, doğru bildin!') {
        endGame();
    }
});

function addMessage(content, type) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}`;
    messageDiv.textContent = content;
    messagesDiv.appendChild(messageDiv);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

function addConfirmedTrait(trait) {
    trait = trait.replace(/\?/g, '')
                 .replace(/\s+mi$/i, '')
                 .replace(/\s+mı$/i, '')
                 .replace(/\s+mu$/i, '')
                 .replace(/\s+mü$/i, '')
                 .trim();

    if (!trait) return;

    const existingTraits = Array.from(confirmedTraits.children).map(child => child.textContent);
    
    if (existingTraits.includes(trait)) return;

    const traitDiv = document.createElement('div');
    traitDiv.className = 'confirmed-trait';
    traitDiv.textContent = trait;
    confirmedTraits.appendChild(traitDiv);
}

function endGame() {
    questionForm.style.display = 'none';
    gameEndControls.style.display = 'flex';
    addMessage('Tebrikler! Doğru bildin. Oyun bitti.', 'system');
}

questionForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const question = questionInput.value.trim();
    if (!question) return;

    // Soruyu göster
    addMessage(question, 'question');
    questionInput.value = '';

    try {
        const response = await fetch(`/api/games/${gameId}/ask`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ question })
        });

        const data = await response.json();
        if (response.ok) {
            // Cevabı göster
            addMessage(data.answer, 'answer');

            // Eğer cevap "Evet" ise veya "Evet, doğru bildin!" ise, doğru cevaplar paneline ekle
            if (data.answer.toLowerCase().startsWith('evet')) {
                addConfirmedTrait(question);
            }

            // Eğer oyun bittiyse
            if (data.answer === 'Evet, doğru bildin!') {
                endGame();
            }
        } else {
            addMessage('Bir hata oluştu: ' + data.error, 'error');
        }
    } catch (error) {
        console.error('Hata:', error);
        addMessage('Bir hata oluştu', 'error');
    }
});
</script> 